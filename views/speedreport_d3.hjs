<!doctype html>

<html>
<head>
	<meta http-equiv="X-UA-Compatible" content="IE=9;IE=8;IE=7;">
	<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
</head>
<body>
	<style>
		div.tooltip {   
		  position: absolute; 
		  overflow:hidden;         
		  text-align: left;           
		  width: 300px;                  
		  height: 100px;                 
		  padding: 2px;             
		  font: 12px sans-serif;        
		  background: lightsteelblue;   
		  border: 0px;      
		  border-radius: 8px;           
		  pointer-events: none;         
		}
	</style>
	<h1>Speed report for {{url}}</h1>
	<div id="headers"></div>
	<div id="main">
		Analyzing...
	</div>
	<script>
		function normalizeReportData(data){
			data.duration=data.responseTime-data.requestTime;
			data.blocked=0;
			data.latency=0;
			data.downloadTime=0;
			data.lifetime=0;
			data.pageLifetime=0;
			data.stacked=[];
			data.stackedProperties=['Blocking', 'Latency', 'Download time', 'Lifetime'];
			data.stackedColors=['steelblue', 'yellow', 'red', 'green'];
			data.assetCount=data.assets.length;
			data.mimeTypes={};
			data.mimeGroups={};
			data.assets.forEach(function(asset){
				asset.request.time=Date.parse(asset.request.time);
				asset.response.time=Date.parse(asset.response.time);
				asset.response.received=Date.parse(asset.response.received);
				asset.blocked=asset.request.time-data.requestTime;
				asset.latency=asset.response.received-asset.request.time;
				asset.latencyStacked=asset.blocked+asset.latency;
				asset.downloadTime=asset.response.time-asset.response.received;
				asset.downloadTimeStacked=asset.latencyStacked+asset.downloadTime;
				asset.lifetime=asset.response.time-asset.request.time;
				asset.pageLifetime=asset.response.time-data.requestTime;
				asset.stacked=[asset.blocked,asset.latencyStacked,asset.downloadTimeStacked, asset.pageLifetime];
				asset.mimeType=asset.response.contentType;
				if(asset.mimeType.indexOf(';')!==-1){
					asset.mimeType=asset.response.contentType.substring(0,asset.response.contentType.indexOf(';'));
				}
				asset.mimeGroup=asset.mimeType.substring(0,asset.mimeType.indexOf('/'));
				data.blocked+=asset.blocked;
				data.latency+=asset.latency;
				data.downloadTime+=asset.downloadTime;
				data.lifetime+=asset.lifetime;
				data.pageLifetime+=asset.pageLifetime;
				data.stacked.push(asset.stacked);
				if(asset.mimeType in data.mimeTypes){
					data.mimeTypes[asset.mimeType].push(asset);
				}else{
					data.mimeTypes[asset.mimeType]=[asset];
				}
			})
			return data;
		}
		function highlightProperty(d,i){
			console.log(this,d,i);
			chart.selectAll('g.bargraph').style('opacity','0.1')
			chart.selectAll('g.bargraph:nth-child('+(i+1)+')').style('opacity','1')
		}
		function unhighlightProperty(d,i){
			chart.selectAll('g.bargraph').style('opacity','1')
		}
		function createBarGraph(data){
			var w=800
				, thickness=25
				, h=thickness*data.assetCount
				, dist = d3.scale.linear().domain([0, data.assetCount]).range([0, h])//distribution
				, mag = d3.scale.linear().domain([0, data.duration]).rangeRound([10, w])//magnitude
				, chart=d3
					.select('#main')
					.html('')
					.append('svg')
					.attr("class", "chart")
					.attr("width", w+25)
					.attr("height", h+25)
					.on("click", function(d,i) {
						chart.selectAll('g.bargraph').style('opacity','1')
					})
				, legend=d3
					.select('#main')
					.append('svg')
					.attr("class", "legend")
					.attr("width", 100)
					.attr("height", 100)
				, properties=[3,2,1,0];
			legend
				.selectAll("rect")
				.data(properties)
				.enter()
				.append("rect")
				.attr("fill", function(d,i){return data.stackedColors[d]})
				.attr("x", 0)
				.attr("y", function(d, i) { return dist(i); })
				.attr("width", 100)
				.attr("height", thickness)
				.on("click", function(d,i) {
					console.log(this,d,i);
					chart.selectAll('g.bargraph').style('opacity','0.1')
					chart.selectAll('g.bargraph:nth-child('+(i+1)+')').style('opacity','1')
				});
			legend
				.selectAll('text')
				.data(properties)
				.enter()
				.append("text")
				.attr("x", 0)
				.attr("y", function(d, i) { return dist(i+1); })
				.attr("width", 100)
				.attr("height", thickness)
				.attr("dx", ".35em") // padding-right
				.attr("dy", -6) // vertical-align: middle
				.attr("text-anchor", "start") // text-align: right
				.style('font-size','0.75em')
				.text(function(d,i){return data.stackedProperties[d]});

			//each property has its own bar graph in its own layer
			properties.forEach(function(property){
				var _data=data.stacked.map(function(stack){return stack[property]});
				chart
					.append("g")
					.attr('class','bargraph')
					.attr('id',data.stackedProperties[property])
					.attr("transform", "translate(0,25)")
					.selectAll("rect")
					.data(_data)
					.enter()
					.append("rect")
					.style('opacity',0)
					.attr("fill", data.stackedColors[property])
					.attr("x", 0)
					.attr("y", function(d, i) { return dist(i); })
					.attr("width", 0)
					.attr("height", thickness)
					.transition()
					.delay(function(d,i){return data.assets[i].blocking})
					.duration(function(d,i){return data.assets[i].pageLifetime})
					.style('opacity',1)
					.attr("width", function(d,i){return mag(d);})
			})
			//URLs
			chart
				.append("g")
				.attr('id','urls')
				.attr("transform", "translate(0,25)")
				.selectAll("text")
				.data(data.assets.map(function(x){return x.request.url}))
				.enter()
				.append("text")
				.attr("x", 0)
				.attr("y", function(d, i) { return dist(i+1); })
				.attr("width", data.duration)
				.attr("height", thickness)
				.attr("dx", ".35em") // padding-right
				.attr("dy", -6) // vertical-align: middle
				.attr("text-anchor", "start") // text-align: right
				.style('font-size','0.75em')
				.text(function(d){return (d.length>100)?d.substring(0,100):d;})
				.on('mouseover',function(d,i){
					var tooltip=d3.select("div.tooltip")
					var item=data.assets[i];
					console.log(d,i,item);
					tooltip.transition()        
		                .duration(200)      
		                .style("opacity", .9);      
		            tooltip.html(d + "<br/>"+
		            		'blocking:&nbsp;'+item.blocked+'ms<br/>'+
		            		'latency:&nbsp;'+item.latency+'ms<br/>'+
		            		'download time:&nbsp;'+item.downloadTime+'ms<br/>'+
		            		'total:&nbsp;'+item.pageLifetime+'ms<br/>'

		            	)
		                .style("left", (d3.event.pageX) + "px")     
		                .style("top", (d3.event.pageY - 28) + "px");    
		            //})                
				})
				.on('mouseover',function(d,i){})
				.on('mouseout',function(d,i){
					d3.select("div.tooltip").transition()        
		                .duration(500)      
		                .style("opacity", 0);   
				});
			var ticks=chart
				.append("g")
				.attr("transform", "translate(0,25)")
			ticks.selectAll("line")
				.data(mag.ticks(10))
				.enter().append("line")
				.attr("x1", mag)
				.attr("x2", mag)
				.attr("y1", 0)
				.attr("y2", h)
				.style("stroke", "#ccc");
			//tick labels
			ticks.selectAll(".rule")
				.data(mag.ticks(10))
				.enter().append("text")
				.attr("class", "rule")
				.attr("x", mag)
				.attr("y", 0)
				.attr("dy", -3)
				.attr("text-anchor", "middle")
				.text(function(d,i){return d+'ms'});
			//Y-Axis
			ticks.append("line")
				.attr("y1", 0)
				.attr("y2", h)
				.style("stroke", "#000");
		}
		d3.json('/speedreport/data?url={{url}}',function(reportdata){
			var data=normalizeReportData(reportdata);
			var tooltip = d3.select("body").append("div")   
			    .attr("class", "tooltip")               
			    .style("opacity", 0);
			console.log(data);
			createBarGraph(data);
		});
			
	</script>
</body>
</html>
